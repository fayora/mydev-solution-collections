{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
            "defaultValue": "hpcadmin",
      "metadata": {
                "description": "Specify the username for administrator of the cluster. To avoid any deployment errors, please check the list of [disallowed usernames](https://learn.microsoft.com/azure/virtual-machines/windows/faq?WT.mc_id=Portal-fx#what-are-the-username-requirements-when-creating-a-vm-)."
      }
    },
    "adminPassword": {
            "type": "securestring",
            "minLength": 12,
            "maxLength": 72,
      "metadata": {
                "description": "Specify the password for the administrator of the cluster. The password must meet Azure's [password requirements](https://docs.microsoft.com/azure/virtual-machines/windows/faq?WT.mc_id=Portal-fx#what-are-the-password-requirements-when-creating-a-vm-)."
      }
    },
    "maxNumberOfComputeNodes": {
      "defaultValue": 4,
      "minValue": 0,
      "maxValue": 1000,
            "type": "int",
      "metadata": {
                "description": "Maximum number of compute nodes that can run at any time."
      }
    },
    "workstationSize": {
      "type": "string",
            "defaultValue": "8-CPUs,32GB-RAM",
            "allowedValues": [
                "8-CPUs,32GB-RAM",
                "12-CPUs,48GB-RAM",
                "16-CPUs,64GB-RAM",
                "20-CPUs,80GB-RAM"
            ],
      "metadata": {
                "description": "The size of the MATLAB workstation, which will also run the HPC cluster job manager."
      }
    },
    "computeNodeSize": {
            "type": "string",
            "defaultValue": "8-CPUs,32GB-RAM",
            "allowedValues": [
                "4-CPUs,8GB-RAM",
                "4-CPUs,16GB-RAM",
                "8-CPUs,32GB-RAM",
                "16-CPUs,32GB-RAM",
                "16-CPUs,64GB-RAM"
            ],
            "metadata": {
                "description": "The size of the compute nodes in the HPC cluster. Note that this do not to be large as the workstation size, as the compute nodes are only used for running MATLAB workers in parallel."
            }
        },
    "useSpotInstancesForWorkerNodes": {
      "defaultValue": "No",
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Option indicating whether to enable Azure Spot Virtual Machines for worker nodes. For more information, refer to the FAQ section in the deployment README."
      }
    },
    "numberOfWorkersPerComputeNode": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 1,
            "maxValue": 1000,
            "metadata": {
                "description": "The number of MATLAB workers to start on each compute node instance. As a general rule, specify 1 worker for every 2 CPUs, because this results in 1 worker per physical core."
      }
    },
    "subnetName": {
      "type": "string",
            "defaultValue": "",
      "metadata": {
                "description": "The name of the subnet where the MATLAB cluster will be deployed."
      }
    },
    "licenseServer": {
      "defaultValue": "",
            "type": "string",
      "metadata": {
        "description": "License manager for MATLAB, specified as a string in the form port@hostname. If not specified, online licensing is used. Otherwise, license manager must be accessible from the specified virtual network and subnets. For more information, see https://github.com/mathworks-ref-arch/license-manager-for-matlab-on-azure."
      }
    },
    "startingNumberOfComputeNodes": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 1000,
            "metadata": {
                "description": "The number of compute nodes to start when the cluster is deployed. Specifying a value of 0 will start the cluster with no compute nodes, but they will be added as needed when jobs run."
            }
    },
    "enableAutoscaling": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
              "metadata": {
              "description": "Flag indicating whether instance autoscaling is enabled. For more information about autoscaling, refer to the 'Use Autoscaling' section in the deployment README."
            }
    },
    "automaticallyTerminateCluster": {
      "defaultValue": "Never",
      "allowedValues": [
        "Disable auto-termination",
        "Never",
        "When cluster is idle",
        "After 1 hour",
        "After 2 hours",
        "After 3 hours",
        "After 4 hours",
        "After 5 hours",
        "After 6 hours",
        "After 7 hours",
        "After 8 hours",
        "After 9 hours",
        "After 10 hours",
        "After 11 hours",
        "After 12 hours",
        "After 13 hours",
        "After 14 hours",
        "After 15 hours",
        "After 16 hours",
        "After 17 hours",
        "After 18 hours",
        "After 19 hours",
        "After 20 hours",
        "After 21 hours",
        "After 22 hours",
        "After 23 hours",
        "After 24 hours"
      ],
      "type": "String",
      "metadata": {
        "description": "Option to autoterminate the cluster after a few hours or when idle. When the cluster is terminated, all worker nodes are deleted and the headnode is deallocated. Select 'Never' to disable auto-termination now but you can enable it later. Select 'Disable auto-termination' to fully disable this feature or if you do not have the permissions to create and assign roles in your subscription. For more information, see [Automatically terminate the MATLAB Parallel Server cluster](https://github.com/mathworks-ref-arch/matlab-parallel-server-on-azure-lin#automatically-terminate-the-matlab-parallel-server-cluster)."
      }
    },
    "SchedulingAlgorithm": {
      "metadata": {
        "description": "Scheduling algorithm for the job manager. 'standard' spreads communicating jobs across as few worker machines as possible to reduce communication overheads and fills in unused spaces on worker machines with independent jobs. Suitable for good behavior for a wide range of uses including autoscaling. 'loadBalancing' distributes load evenly across the cluster to give as many resources as possible to running jobs and tasks when the cluster is underutilized."
      },
      "type": "String",
      "allowedValues": [
        "standard",
        "loadBalancing"
      ],
      "defaultValue": "standard"
    }
  },
  "variables": {
    "vnetName": "PathWestVPN",
    "vnetResourceGroup": "rg-PathWestVPNAccess",

    "publisher": "mathworks-inc",
    "offer": "matlab-parallel-server-ref-arch-vm-win-offer",
    "sku": "matlab-parallel-server-ref-arch-r2024b-vm-win-sku",
    "version": "1.0.0",

    "clusterName": "parallelCluster",
    "fixedPrefix": "mjs",
    "uniqueHash": "[uniqueString(deployment().properties.templateHash, deployment().name)]",
    "windowsVMNameLengthLimit": 15,
    "windowsVMSSNameLengthLimit": 9,
    "resourceGroupUniqueString": "[take(variables('uniqueHash'),6)]",
    "namingPrefix": "[concat(variables('fixedPrefix'), '-', variables('uniqueHash'))]",
    "headNodeSKU": {
        "8-CPUs,32GB-RAM": "Standard_D8as_v5",
        "12-CPUs,48GB-RAM": "Standard_B12ms",
        "16-CPUs,64GB-RAM": "Standard_D16as_v5",
        "20-CPUs,80GB-RAM": "Standard_B20ms"
    },
    "headNodeVmSize": "[variables('headNodeSKU')[parameters('workstationSize')]]",
    "computeNodeSKU": {
        "4-CPUs,8GB-RAM": "Standard_B4als_v2",
        "4-CPUs,16GB-RAM": "Standard_D4as_v5",
        "8-CPUs,32GB-RAM": "Standard_D8as_v5",
        "16-CPUs,32GB-RAM": "Standard_B16als_v2",
        "16-CPUs,64GB-RAM": "Standard_D16as_v5"
    },
    "workerVmSize": "[variables('computeNodeSKU')[parameters('computeNodeSize')]]",

    
    "subnetNameSpecified": "[parameters('subnetName')]",
    "subnet": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vnetResourceGroup'), '/providers/Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', variables('subnetNameSpecified'))]",
    "headnodeMachineName": "[take(concat(variables('fixedPrefix'), variables('uniqueHash')), variables('windowsVMNameLengthLimit'))]",
    "vmssName": "[take(concat(variables('fixedPrefix'), variables('uniqueHash')), variables('windowsVMSSNameLengthLimit'))]",

    "imageReference": {
      "publisher": "[variables('publisher')]",
      "offer": "[variables('offer')]",
      "sku": "[variables('sku')]",
      "version": "[variables('version')]"
    },
    "plan": {
      "name": "[variables('sku')]",
      "publisher": "[variables('publisher')]",
      "product": "[variables('offer')]"
    },
    "osDisk": {
      "createOption": "fromImage",
      "managedDisk": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "storageProfileWithoutDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]"
    },
    "databaseVolumeSize": 128,
    "storageProfileWithDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]",
      "dataDisks": [
        {
          "name": "[concat(variables('headnodeMachineName'), '-database')]",
          "diskSizeGB": "[variables('databaseVolumeSize')]",
          "lun": 0,
          "createOption": "Empty",
          "caching": "None"
        }
      ]
    },
    "networkInterfacePostfix": "nic",
    "publicIpConfigPostfix": "ipConfig",
    "nicName": "[concat(variables('vmssName'), variables('networkInterfacePostfix'))]",
    "networkSecurityGroupName": "[concat(variables('namingPrefix'), '-nsg')]",
        "totalPorts": "[add(7, mul(4, parameters('numberOfWorkersPerComputeNode')))]",
    "startPort": 27350,
    "finalPort": "[add(variables('startPort'), variables('totalPorts'))]",
    "storageAccountName": "[concat('mwstorage', variables('resourceGroupUniqueString'))]",
    "storageAccountType": "Standard_LRS",
    "MJSSecurityLevel": "0",
    "userDataScript": [
      "# Copyright 2023 The MathWorks, Inc.",
      "",
      "$StartupFolder = \"$Env:ProgramFiles\\MathWorks\\startup\"",
      "# Load startup variables",
      "If (Test-Path $StartupFolder\\env.ps1) {",
      "    . $StartupFolder\\env.ps1",
      "}",
      "",
      "# Define startup parameters",
      "[concat('$Env:JobManagerName=\"', variables('clusterName'), '\"')]",
      "[concat('$Env:WorkersPerNode=\"', parameters('numberOfWorkersPerComputeNode'), '\"')]",
      "[concat('$Env:MLMLicenseFile=\"', parameters('licenseServer'), '\"')]",
      "[concat('$Env:SecurityLevel=\"', variables('MJSSecurityLevel'), '\"')]",
      "[concat('$Env:SchedulingAlgorithm=\"', parameters('SchedulingAlgorithm'), '\"')]",
      "[concat('$Env:AZURE_STORAGE_ACCOUNT=\"', variables('storageAccountName'), '\"')]",
      "{{NODE_SPECIFIC_PARAMETERS}}",
      "",
      "# Run startup scripts",
      "Start-Transcript -Path $Env:ProgramData\\MathWorks\\startup.log -Append",
      "Get-ChildItem $StartupFolder | Where-Object { $_ -match '^[0-9]+_.+$' } | Sort-Object | ForEach-Object { Write-Output \"startup: executing $_\"; & $_.FullName }",
      "Stop-Transcript"
    ],
    "terminationPolicy": "[if(equals(parameters('automaticallyTerminateCluster'), 'When cluster is idle'), 'on_idle', if(equals(parameters('automaticallyTerminateCluster'),'Never'),'never',parameters('automaticallyTerminateCluster')))]",
    "startupParametersHeadnode": [
      "$Env:NodeType='headnode'",
      "[concat('$Env:EnableAutoscaling=\"', parameters('enableAutoscaling'), '\"')]",
      "[concat('$Env:MaxNodes=', parameters('maxNumberOfComputeNodes'))]",
      "[concat('$Env:DesiredCapacity=', parameters('startingNumberOfComputeNodes'))]",
      "[concat('$Env:TerminationPolicy=\"', variables('terminationPolicy'), '\"')]"
    ],
    "startupParametersWorker": [
      "$Env:NodeType='worker'",
      "[concat('$Env:USE_SPOT_INSTANCE=\"', parameters('UseSpotInstancesForWorkerNodes'), '\"')]"
    ],
    "vmssManagementPermissions": [
      "Microsoft.Compute/virtualMachineScaleSets/read",
      "Microsoft.Compute/virtualMachineScaleSets/write",
      "Microsoft.Compute/virtualMachineScaleSets/delete/action",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/delete"
    ],
    "headnodeManagementPermissions": [
      "Microsoft.Resources/tags/write",
      "Microsoft.Compute/virtualMachines/read",
      "Microsoft.Compute/virtualMachines/deallocate/action"
    ],
    "autoscalingRoleName": "[guid(resourceGroup().id, 'autoscaling-role')]",
    "privateIPAddressForNodes": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
    "minWorkerNodes": 0,
    "tagsForVMSS": {
        "mwMinCount": "[variables('minWorkerNodes')]",
        "mwDesiredCount": "[parameters('startingNumberOfComputeNodes')]",
        "mwMaxCount": "[parameters('maxNumberOfComputeNodes')]",
        "mwWorkersPerNode": "[parameters('numberOfWorkersPerComputeNode')]",
        "mwWorkerIdleTimeoutMinutes": 10
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
        "properties": {
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": true
            }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-01-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-rdp",
            "properties": {
              "priority": 1000,
                "sourceAddressPrefixes": [
                    "194.80.48.0/20",
                    "212.219.224.0/24",
                    "212.219.220.0/22"
                ],
              "protocol": "Tcp",
              "destinationPortRange": "3389",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "mathworks-job-scheduler-inbound",
            "properties": {
              "priority": 1010,
                "sourceAddressPrefixes": [
                    "194.80.48.0/20",
                    "212.219.224.0/24",
                    "212.219.220.0/22"
                ],
              "protocol": "Tcp",
              "destinationPortRange": "[concat(variables('startPort'), '-', variables('finalPort'))]",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-internal-traffic",
            "properties": {
              "priority": 1020,
              "sourceAddressPrefix": "VirtualNetwork",
              "protocol": "Tcp",
              "destinationPortRange": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "VirtualNetwork"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-01-01",
      "name": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('headnodeMachineName'), variables('publicIpConfigPostfix'))]",
            "properties": {
              "subnet": {
                "id": "[variables('subnet')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "name": "[variables('headnodeMachineName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "plan": "[variables('plan')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "osProfile": {
          "computerName": "[variables('headnodeMachineName')]",
          "AdminUsername": "[parameters('adminUsername')]",
          "AdminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('headNodeVmSize')]"
        },
            "storageProfile": "[if(greater(variables('databaseVolumeSize'), 0), variables('storageProfileWithDataDisk'), variables('storageProfileWithoutDataDisk'))]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]"
            }
          ]
        },
          "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersHeadnode'), '\n'), '\n$Env:AZURE_STORAGE_KEY=\"', listKeys(variables('storageAccountName'), '2022-09-01').keys[0].value, '\"', '\n$Env:HeadnodeHostname=\"', reference(variables('privateIPAddressForNodes')).ipConfigurations[0].properties.privateIPAddress, '\"')))]"
      },
      "resources": [
        {
          "type": "extensions",
          "apiVersion": "2023-03-01",
          "name": "startup",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
          ],
          "tags": {
            "displayName": "startup"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.10",
            "autoUpgradeMinorVersion": true,
            "protectedSettings": {
              "commandToExecute": "powershell.exe -Command \"$UserData = [scriptblock]::Create([System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((Invoke-RestMethod -Headers @{'Metadata'='true'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text')))); Invoke-Command -ScriptBlock $UserData\""
            }
          }
        }
      ]
    },
    {
      "condition": "[equals(parameters('enableAutoscaling'), 'Yes')]",
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-04-01",
        "name": "[variables('autoscalingRoleName')]",
      "properties": {
        "assignableScopes": [
          "[resourceGroup().id]"
        ],
        "description": "Grants access to manage VMSS and VMs.",
        "permissions": [
          {
            "actions": "[union(variables('headnodeManagementPermissions'), variables('vmssManagementPermissions'))]"
          }
        ],
            "roleName": "[concat('Autoscaling Orchestrator - ', resourceGroup().name)]",
        "type": "customRole"
      }
    },
    {
      "condition": "[equals(parameters('enableAutoscaling'), 'Yes')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, deployment().name)]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('autoscalingRoleName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('autoscalingRoleName'))]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2022-08-01",
      "name": "[variables('vmssName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('headnodeMachineName'), variables('networkInterfacePostfix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
        "tags": "[variables('tagsForVMSS')]",
      "sku": {
        "name": "[variables('workerVmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('startingNumberOfComputeNodes')]"
      },
      "plan": "[variables('plan')]",
      "properties": {
        "overprovision": false,
        "upgradepolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), bool('true'), json('null'))]",
        "virtualMachineProfile": {
          "priority": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Spot', 'Regular')]",
          "evictionPolicy": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Deallocate', json('null'))]",
          "billingProfile": {
            "maxPrice": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), -1, json('null'))]"
          },
          "scheduledEventsProfile": {
            "terminateNotificationProfile": {
              "enable": true
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('vmssName')]",
            "AdminUsername": "[parameters('adminUsername')]",
            "AdminPassword": "[parameters('adminPassword')]",
            "windowsConfiguration": {
              "provisionVmAgent": true
            }
          },
          "storageProfile": "[variables('storageProfileWithoutDataDisk')]",
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                            "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('vmssName'), variables('publicIpConfigPostfix'))]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnet')]"
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
                "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersWorker'), '\n'), '\n$Env:AZURE_STORAGE_KEY=\"', listKeys(variables('storageAccountName'), '2022-09-01').keys[0].value, '\"', '\n$Env:HeadnodeHostname=\"', reference(variables('privateIPAddressForNodes')).ipConfigurations[0].properties.privateIPAddress, '\"', '\n$Env:HeadnodeLocalIP=\"', reference(variables('privateIPAddressForNodes')).ipConfigurations[0].properties.privateIPAddress, '\"')))]",
          "extensionProfile": {
            "extensions": [
              {
                "name": "[concat(variables('vmssName'), '-installation')]",
                "properties": {
                  "publisher": "Microsoft.Compute",
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.10",
                  "autoUpgradeMinorVersion": true,
                  "protectedSettings": {
                    "commandToExecute": "powershell.exe -Command \"$UserData = [scriptblock]::Create([System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String((Invoke-RestMethod -Headers @{'Metadata'='true'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text')))); Invoke-Command -ScriptBlock $UserData\""
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ],
  "outputs": {
        "RDPAddress": {
            "type": "string",
            "value": "[reference(variables('privateIPAddressForNodes')).ipConfigurations[0].properties.privateIPAddress]"
        },
        "deployedVirtualMachineName": {
            "type": "string",
            "value": "[variables('headnodeMachineName')]"
        },
        "storageAccount": {
            "type": "string",
            "value": "[variables('storageAccountName')]"}
  }
}
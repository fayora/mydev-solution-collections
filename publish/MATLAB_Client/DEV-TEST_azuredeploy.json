{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workstationSize": {
            "type": "string",
            "defaultValue": "8-CPUs,32GB-RAM",
            "allowedValues": [
            "8-CPUs,32GB-RAM",
            "16-CPUs,64GB-RAM",
            "32-CPUs,128GB-RAM",
            "64-CPUs,256GB-RAM",
            "120-CPUs,456GB-RAM"
            ],
            "metadata": {
                "description": "The Azure instance type to use for this VM. See [Azure virtual machines](https://docs.microsoft.com/en-us/azure/virtual-machines/sizes) for a list of instance types."
            }
        },
        "useSpotInstance": {
            "defaultValue": "No",
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Select if you want to use a Spot instance or not. Spot instances are available at a lower price than On-Demand instances. However, they can be interrupted by Azure with a 30-second notice. For more information, see [Azure Spot Instances](https://docs.microsoft.com/en-us/azure/virtual-machines/spot-vms)."
            }
        },
        "adminUsername": {
            "defaultValue": "hpcadmin",
            "type": "string",
            "metadata": {
                "description": "Admin username for this virtual machine. To avoid any deployment errors, please check the list of [disallowed values](https://docs.microsoft.com/en-us/rest/api/compute/virtual-machines/create-or-update?tabs=HTTP#osprofile) for adminUsername."
            }
        },
        "adminPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Choose the password for the admin username. This password is required when logging in remotely to the instance. For the deployment to succeed, your password must meet [Azure's password requirements](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm-)."
            }
        },
        "virtualNetworkResourceID": {
            "defaultValue": "/subscriptions/95df65f7-dad7-44cb-802f-80a1f79de657/resourceGroups/rg-hubnetwork-hpc-uks-01/providers/Microsoft.Network/virtualNetworks/vnet-hub-hpc-uks-01",
            "type": "string",
            "metadata": {
                "description": "Resource ID of an existing virtual network to deploy your VM into. You can find this under the Properties of your virtual network."
            }
        },
        "subnetName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Name of an existing subnet within your virtual network to deploy your VM into."
            }
        },
        "allowPublicIP": {
            "defaultValue": "No",
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "WARNING: Select 'Yes' only for testing, to allow public IP address. This will expose your VM to the internet. Select 'No' otherwise."
            }
        },
        "matlabLicenseServer": {
            "defaultValue": "27000@10.212.12.98",
            "type": "string",
            "metadata": {
                "description": "Optional License Manager for MATLAB, specified as a string in the form port@hostname. If not specified, online licensing is used. If specified, the license manager must be accessible from the specified virtual network and subnets. For more information, see https://github.com/mathworks-ref-arch/license-manager-for-matlab-on-azure."
            }
        },
        "optionalUserCommand": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide an optional inline PowerShell command to run on machine launch. For example, to set an environment variable CLOUD=AZURE, use this command excluding the angle brackets: &lt;[System.Environment]::SetEnvironmentVariable(\"CLOUD\",\"AZURE\", \"Machine\");&gt;. You can use either double quotes or two single quotes. To run an external script, use this command excluding the angle brackets: &lt;Invoke-WebRequest \"https://www.example.com/script.ps1\" -OutFile script.ps1; .\\script.ps1&gt;. Find the logs at '$Env:ProgramData\\MathWorks\\startup.log'."
            }
        },
        "fileShareName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the name of the Azure File Share to mount on the VM."
            }
        },
        "storageAccountName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the name of the Azure Storage Account where the file share was created."
            }
        },
        "storageAccountKey": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Provide the key of the Azure Storage Account where the file share was created."
            }
        }
    },
    "variables": {
        "VmSize": {
            "8-CPUs,32GB-RAM": "Standard_B8as_v2",
            "16-CPUs,64GB-RAM": "Standard_B16as_v2",
            "32-CPUs,128GB-RAM": "Standard_D32as_v5",
            "64-CPUs,256GB-RAM": "Standard_D64as_v5",
            "120-CPUs,456GB-RAM": "Standard_HB120rs_v3"
        },
        "fixedPrefix": "matlab",
        "uniqueHash": "[uniqueString(deployment().properties.templateHash, deployment().name)]",
        "prefix": "[take(concat(variables('fixedPrefix'), variables('uniqueHash')),12)]",
        "addressPrefix": "10.0.0.0/16",
        "subnetPrefix": "10.0.0.0/24",
        "newOrExistingVirtualNetwork": "Existing",
        "virtualNetworkCreateName": "[concat(variables('prefix'), 'vnet')]",
        "subnetCreateName": "[concat(variables('prefix'), 'subnet')]",
        "virtualNetworkName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),last(split(parameters('virtualNetworkResourceID'),'/')),variables('virtualNetworkCreateName'))]",
        "subnetName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),parameters('subnetName'),variables('subnetCreateName'))]",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
        "subnetId": "[if(equals(variables('newOrExistingVirtualNetwork'),'New'),variables('subnetRef'),concat(parameters('virtualNetworkResourceID'), '/subnets/', parameters('subnetName')))]",
        "userDataScript": [
            "# Copyright 2023 The MathWorks, Inc.",
            "",
            "$StartupFolder = \"$Env:ProgramFiles\\MathWorks\\startup\"",
            "# Load startup variables",
            "If (Test-Path $StartupFolder\\env.ps1) {",
            "    . $StartupFolder\\env.ps1",
            "}",
            "",
            "# Define startup parameters",
            "[concat('$Env:MLMLicenseFile=\"', parameters('matlabLicenseServer'), '\"')]",
            "[concat('$Env:Username=\"', parameters('adminUsername'), '\"')]",
            "[concat('$Env:OptionalUserCommand=', '''', parameters('optionalUserCommand'), '''')]",
            "",
            "# Run startup scripts",
            "Start-Transcript -Path $Env:ProgramData\\MathWorks\\startup.log -Append",
            "Get-ChildItem $StartupFolder | Where-Object { $_ -match '^[0-9]+_.+$' } | Sort-Object | ForEach-Object { Write-Output \"startup: executing $_\"; & $_.FullName }",
            "Stop-Transcript",
            "##### Mount the file share if provided by the user #####",
            "# Define the file share variables",
            "[concat('$FileShare=\"', parameters('fileShareName'), '\"')]",
            "[concat('$StorageAccountName=\"', parameters('storageAccountName'), '\"')]",
            "[concat('$StorageAccountFullPath=\"', parameters('storageAccountName'),'.file.core.windows.net', '\"')]",
            "[concat('$StorageKey=\"', parameters('storageAccountKey'), '\"')]",
            "# Save the password so the drive will persist on reboot",
            "####################### cmd.exe /C \"cmdkey /add:`\"$($StorageAccountFullPath)`\" /user:`\"localhost\\$($StorageAccountName)`\" /pass:`\"$($StorageKey)`\"\"",
            "& cmdkey /add:\"$($StorageAccountFullPath)\" /user:\"localhost\\$($StorageAccountName)\" /pass:\"$($StorageKey)\"",
            "# Mount the drive",
            "New-PSDrive -Name Z -PSProvider FileSystem -Root \"\\\\$($StorageAccountFullPath)\\$($FileShare)\" -Persist"
        ],
        "networkSecurityGroupName": "[concat(variables('prefix'), 'rdpnsg')]",
        "publicIp": "[concat(variables('prefix'), 'publicIP')]",
        "domainNameLabel": "[concat(variables('prefix'), 'azure', uniqueString(resourceGroup().id))]",
        "nicName": "[concat(variables('prefix'), 'nic')]",
        "vmName": "[concat(variables('prefix'),  'vm')]",
        "publisher": "mathworks-inc",
        "offer": "matlab-ref-arch-windows-disk",
        "sku": "matlab-ref-arch-win-sku-r2023b",
        "version": "1.0.8"
    },
        "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2022-01-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetCreateName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            },
            "condition": "[equals(variables('newOrExistingVirtualNetwork'),'New')]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-01-01",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-rdp",
                        "properties": {
                            "priority": 1001,
                            "sourceAddressPrefix": "*",
                            "protocol": "Tcp",
                            "destinationPortRange": "3389",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[equals(parameters('allowPublicIP'),'Yes')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-01-01",
            "name": "[variables('publicIp')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('domainNameLabel')]"
                },
                "idleTimeoutInMinutes": 20
            }
        },
        {
            "condition": "[equals(parameters('allowPublicIP'),'Yes')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-01-01",
            "name": "[variables('nicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses/', variables('publicIp'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "nic1IpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIp'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "condition": "[equals(parameters('allowPublicIP'),'No')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2022-01-01",
            "name": "[variables('nicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "nic1IpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2023-03-01",
            "name": "[variables('vmName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "plan": {
                "name": "[variables('sku')]",
                "publisher": "[variables('publisher')]",
                "product": "[variables('offer')]"
            },
            "properties": {
                "hardwareProfile": {
                    "VmSize": "[variables('VmSize')[parameters('workstationSize')]]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('publisher')]",
                        "offer": "[variables('offer')]",
                        "sku": "[variables('sku')]",
                        "version": "[variables('version')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "AdminUsername": "[parameters('adminUsername')]",
                    "AdminPassword": "[parameters('adminPassword')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": false
                    }
                },
                "priority": "[if(equals(parameters('useSpotInstance'),'Yes'),'Spot','Regular')]",
                "evictionPolicy": "[if(equals(parameters('useSpotInstance'),'Yes'),'Deallocate',null())]",
                "billingProfile": {
                    "maxPrice": "[if(equals(parameters('useSpotInstance'),'Yes'), -1,null())]"
                },
                "userData": "[base64(join(variables('userDataScript'), '\r\n'))]"
            },
            "resources": [
                {
                    "type": "extensions",
                    "apiVersion": "2023-03-01",
                    "name": "startup",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
                    ],
                    "tags": {
                        "displayName": "startup"
                    },
                    "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "protectedSettings": {
                            "commandToExecute": "powershell -Command \"[System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($(Invoke-RestMethod -Headers @{'Metadata'='true'} -Method GET -Uri 'http://169.254.169.254/metadata/instance/compute/userData?api-version=2021-01-01&format=text'))) | powershell\""
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "RDPAddress": {
            "type": "string",
            "value": "[if(equals(parameters('allowPublicIP'),'Yes'),reference(variables('publicIp')).dnsSettings.fqdn,reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress)]"
        },
        "deployedVirtualMachineName": {
            "type": "string",
            "value": "[variables('vmName')]"
        }
    }
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "VirtualMachineName": {
        "type": "string",
        "defaultValue": "",
        "minLength": 4,
        "maxLength": 15,
        "metadata": {
          "description": "The name you want to give your Virtual Machine. Windows VM names may only contain 15 letters or numbers, and can't include '.' or end with '-'."
        }
      },
      "Size": {
        "type": "string",
        "defaultValue": "8 CPU cores, 32GB of RAM",
        "allowedValues": [
          "8 CPU cores, 32GB of RAM",
          "16 CPU cores, 64GB of RAM",
          "Single A100 GPU, 24 CPU cores, 220GB of RAM"
        ],
        "metadata": {
          "description": "Choose a virtual machine size with or without a GPU."
        }
      },
      "adminUsername": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "metadata": {
          "description": "The username for the Administrator's account. A username must only contain letters, numbers, hyphens, and underscores and may not start with a hyphen or number."
        }
      },
      "adminPassword": {
          "type": "securestring",
          "minLength": 12,
          "maxLength": 72,
          "metadata": {
          "description": "Password for the Virtual Machine. It must be at least 12 characters long, and have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character."
          }
      },
      "instanceType": {
        "type": "string",
        "defaultValue": "Regular",
        "allowedValues": [
          "Spot",
          "Regular"
        ],
        "metadata": {
          "description": "Select between a regular or a spot instance. Spot instances cost significantly less but can be turned off unexpectedly."
        }
      }
    },
    "variables": {
      "osDiskSize": "256",
      "vmSize": {
        "8 CPU cores, 32GB of RAM": "Standard_B8as_v2",
        "16 CPU cores, 64GB of RAM": "Standard_B16as_v2",
        "Single A100 GPU, 24 CPU cores, 220GB of RAM": "Standard_NC24ads_A100_v4"
      },
      "location": "[resourceGroup().location]",

      // Unique VM name, replacing '.' with '' and adding a unique string to the end, and then trimming to 15 characters; this is to ensure that the VM name is unique and does not exceed the maximum length for Azure VM names
      "unTrimmedVMName": "[concat(replace(toLower(parameters('VirtualMachineName')), '.', ''), '-', uniqueString(parameters('VirtualMachineName')))]",
      "uniqueVMName": "[substring(variables('unTrimmedVMName'), 0, 15)]",

      // Only the VNet name
      "virtualNetworkName": "[variables('loome').Account.SecureVnet.VnetName]",

      // Only the subnet name
      "subnetName": "[variables('loome').ProjectResources.SecureVnet.SubnetName]",

      // Full VNet ID (across subscription and resource group)
      "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('loome').Account.SecureVnet.SubscriptionId, variables('loome').Account.SecureVnet.ResourceGroupName), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",

      // Full subnet reference (VNet ID + subnet name)
      "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",

      // NSG and NIC
      "networkSecurityGroupName": "[concat('NSG', uniqueString(resourceGroup().id))]",
      "nsgId": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
      "networkInterfaceName": "[concat(parameters('VirtualMachineName'), 'NetInt')]",

      "osDiskType": "Premium_LRS",
      "instancePriority": {
        "Spot": "Spot",
        "Regular": "Regular"
      },
      "instanceEvictionPolicy": {
        "Spot": "Deallocate",
        "Regular": null
      },
      "instanceMaxPrice": {
        "Spot": -1,
        "Regular": null
      },
      "repositoriesRaw": "[string(variables('loome').ProjectResources.DataRepositories)]",
      "repositoriesEscaped": "[replace(variables('repositoriesRaw'), '\"', '\\\"')]",

      "scriptConfigureDSVM": "IyEvYmluL2Jhc2gKIyBUaGlzIHNjcmlwdCBwcmVwYXJlcyBhbiBBenVyZSBNYXJrZXRwbGFjZSBVYnVudHUgMjIuMDQgRGF0YSBTY2llbmNlIFZpcnR1YWwgTWFjaGluZQoKIyBVcGRhdGUgdGhlIHBhY2thZ2UgbGlzdAplY2hvICJVcGRhdGluZyB0aGUgcGFja2FnZSBsaXN0IgpzdWRvIGFwdC1nZXQgdXBkYXRlCgojIEJlZm9yZSBjb250aW51aW5nIHdpdGggdGhlIGluc3RhbGxhdGlvbiwgY2hlY2sgaWYgZHBrZyBpcyBsb2NrZWQgYW5kIHdhaXQgZm9yIGl0IHRvIGJlIHVubG9ja2VkCndoaWxlIHN1ZG8gZnVzZXIgL3Zhci9saWIvZHBrZy9sb2NrID4vZGV2L251bGwgMj4mMSA7IGRvCiAgICBlY2hvICJXYWl0aW5nIDUgc2Vjb25kcyBmb3Igb3RoZXIgc29mdHdhcmUgbWFuYWdlcnMgdG8gZmluaXNoLi4uIgogICAgc2xlZXAgNQpkb25lCgojIFJlbW92ZSB0aGUgZGVmYXVsdCBYRkNFIHNjcmVlbnNhdmVyIHRvIHByZXZlbnQgc2NyZWVuIGxvY2sKZWNobyAiUmVtb3ZpbmcgdGhlIGRlZmF1bHQgWEZDRSBzY3JlZW5zYXZlciIKc3VkbyBhcHQtZ2V0IHJlbW92ZSB4ZmNlNC1zY3JlZW5zYXZlciAteQoKIyBEaXNhYmxlIENvbXBvc2l0aW5nIGluIFhGQ0UgPDw8PDw8PDw8PDw8PDw8LS08PDw8PDw8PDw8PDw8PDwtLSBNSUdIVCBOT1QgQkUgTkVFRFMgVEVTVElORyEhCiMgZWNobyAiRGlzYWJsaW5nIENvbXBvc2l0aW5nIGluIFhGQ0UiCiMgeGZjb25mLXF1ZXJ5IC1jIHhmd200IC1wIC9nZW5lcmFsL3VzZV9jb21wb3NpdGluZyAtcyBmYWxzZQojIHhmY29uZi1xdWVyeSAtLWNyZWF0ZSAtYyAneGZ3bTQnIC1wICcvZ2VuZXJhbC91c2VfY29tcG9zaXRpbmcnIC0tdHlwZSAnYm9vbCcgLS1zZXQgJ2ZhbHNlJwoKIyBSZW1vdmUgdGhlIGJyb2tlbiBGaXJlZm94IGluc3RhbGxhdGlvbiBpbiBVMjIuMDQgRFNWTQplY2hvICJSZW1vdmluZyB0aGUgYnJva2VuIEZpcmVmb3ggaW5zdGFsbGF0aW9uIgpzdWRvIHNuYXAgcmVtb3ZlIC0tcHVyZ2UgZmlyZWZveApzdWRvIGFwdCBwdXJnZSBmaXJlZm94IC15CiMjIElmIHRoZSBhYm92ZSBkb2VzIG5vdCByZW1vdmUgdGhlIGJyb2tlbiBXZWIgQnJvd3NlciBpY29uIGZyb20gdGhlIFhGQ0UgcGFuZWwsIHRyeSB0aGUgZm9sbG93aW5nCiMgIyMgSU1QT1JUQU5UOiBUaGUgcGx1Z2luIG51bWJlciBtYXkgY2hhbmdlLCBjaGVjayB0aGUgY3VycmVudCBudW1iZXIgbWFudWFsbHkgYnkgbG9va2luZyBhdCB0aGUgLmRlc2t0b3AgZmlsZXMgaW4gfi8uY29uZmlnL3hmY2U0L3BhbmVsL2xhdW5jaGVyLU5OICh3aGVyZSBOTiBpcyB0aGUgcGx1Z2luIG51bWJlcikKIyAjIyBUaGlzIGNvbW1hbmQgbWF5IGJlIG9mIGhlbHA6IHN1ZG8gZmluZCAvaG9tZS8qLy5jb25maWcgLXR5cGUgZiAtZXhlYyBncmVwIC1sICJtaWNyb3NvZnQtZWRnZS1kZXYuZGVza3RvcCIKZWNobyAiUmVtb3ZpbmcgdGhlIGJyb2tlbiBXZWIgQnJvd3NlciBpY29uIGZyb20gdGhlIFhGQ0UgcGFuZWwiCnhmY29uZi1xdWVyeSAtLXJlc2V0IC1jICd4ZmNlNC1wYW5lbCcgLXAgJy9wbHVnaW5zL3BsdWdpbi0xMScgLS1yZWN1cnNpdmUKCiMgQmVmb3JlIGNvbnRpbnVpbmcgd2l0aCB0aGUgaW5zdGFsbGF0aW9uLCBjaGVjayBpZiBkcGtnIGlzIGxvY2tlZCBhbmQgd2FpdCBmb3IgaXQgdG8gYmUgdW5sb2NrZWQKd2hpbGUgc3VkbyBmdXNlciAvdmFyL2xpYi9kcGtnL2xvY2sgPi9kZXYvbnVsbCAyPiYxIDsgZG8KICAgIGVjaG8gIldhaXRpbmcgNSBzZWNvbmRzIGZvciBvdGhlciBzb2Z0d2FyZSBtYW5hZ2VycyB0byBmaW5pc2guLi4iCiAgICBzbGVlcCA1CmRvbmUKCiMgUmVtb3ZlIE1TIEVkZ2UgRGV2IGFuZCBpbnN0YWxsIFByb2QgdmVyc2lvbgplY2hvICJSZW1vdmluZyB0aGUgZGV2IHZlcnNpb24gb2YgTWljcm9zb2Z0IEVkZ2UgYW5kIGluc3RhbGxpbmcgdGhlIHByb2QgdmVyc2lvbiIKIyMgUmVtb3ZlIHRoZSBkZXYgdmVyc2lvbgplY2hvICJSZW1vdmluZyB0aGUgZGV2IHZlcnNpb24gb2YgTWljcm9zb2Z0IEVkZ2UiCnN1ZG8gYXB0LWdldCByZW1vdmUgbWljcm9zb2Z0LWVkZ2UtZGV2IC15CiMjIERvd25sb2FkIGFuZCBpbnN0YWxsIHRoZSBwcm9kIHZlcnNpb24KIyMgTGF0ZXN0IHN0YWJsZSB2ZXJzaW9uIGxpc3RlZCBoZXJlOiBodHRwczovL3d3dy5taWNyb3NvZnQuY29tL2VuLXVzL2VkZ2UvYnVzaW5lc3MvZG93bmxvYWQ/Zm9ybT1NQTEzRkoKIyMgUmVwbyB2aXNpYmxlIGhlcmU6IGh0dHBzOi8vcGFja2FnZXMubWljcm9zb2Z0LmNvbS9yZXBvcy9lZGdlL3Bvb2wvbWFpbi9tL21pY3Jvc29mdC1lZGdlLXN0YWJsZS8KbXNFZGdlUHJvZFZlcnNpb249IjEzNS4wLjMxNzkuNTQiCmVjaG8gIkRvd25sb2FkaW5nIGFuZCBpbnN0YWxsaW5nIE1pY3Jvc29mdCBFZGdlIHZlcnNpb24gJG1zRWRnZVByb2RWZXJzaW9uIgp3Z2V0IGh0dHBzOi8vcGFja2FnZXMubWljcm9zb2Z0LmNvbS9yZXBvcy9lZGdlL3Bvb2wvbWFpbi9tL21pY3Jvc29mdC1lZGdlLXN0YWJsZS9taWNyb3NvZnQtZWRnZS1zdGFibGVfJG1zRWRnZVByb2RWZXJzaW9uLTFfYW1kNjQuZGViIC1PIG1pY3Jvc29mdC1lZGdlLmRlYgplY2hvICJJbnN0YWxsaW5nIE1pY3Jvc29mdCBFZGdlIgpzdWRvIGFwdCBpbnN0YWxsIC4vbWljcm9zb2Z0LWVkZ2UuZGViIC15CiMgQ2hlY2sgaWYgdGhlcmUgd2FzIG5vIGVycm9yIGFuZCBkZWxldGUgdGhlIGRvd25sb2FkZWQgZmlsZQppZiBbICQ/IC1lcSAwIF07IHRoZW4KICAgIGVjaG8gIk1pY3Jvc29mdCBFZGdlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkiCiAgICBybSBtaWNyb3NvZnQtZWRnZS5kZWIKZWxzZQogICAgZWNobyAiRXJyb3IgaW5zdGFsbGluZyBNaWNyb3NvZnQgRWRnZTogJD8iCiAgICBleGl0IDEKZmkKCiMjIFRvIGNoYW5nZSB0byBCYXNlIDY0IGVuY29kaW5nIHJ1bjoKIyMgICAgICBjYXQgY29uZmlndXJlX0RTVk1fMjIwNC5zaCB8IGJhc2U2NCAtdyAwID4gY29uZmlndXJlX0RTVk1fMjIwNC5zaC5iNjQ=",

      "userDataScript": [
            "# Custom script for the Windows VM",
            "# This script is executed when the VM is created",
            "# It sets up the environment for the user and installs the necessary software",
            "",
            "# Define parameters",
            "$StartupFolder = \"$Env:ProgramFiles\\Loome\\startup\"",
            "",
            "# Run startup scripts",
            "Start-Transcript -Path $Env:ProgramData\\Loome\\startup.log -Append",
            "Write-Host \"Starting the script to run the startup scripts...\"",
            "Write-Host \"Creating startup folder...\"",
            "New-Item -ItemType Directory -Path $StartupFolder -Force",
            "# Write the startup script to the startup folder, converting from base64 to string",
            "[concat('$ConfigureScriptEncoded = ', '''', variables('scriptConfigureDSVM'), '''')]",
            "[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($ConfigureScriptEncoded)) | Out-File -FilePath \"$StartupFolder\\configure_DSVM_WS2022.ps1\" -Encoding utf8",
            "Write-Host \"Running startup scripts...\"",
            "#Get-ChildItem -Path $StartupFolder -Recurse | ForEach-Object {",
            "#    if ($_.PSIsContainer) {",
            "#        Write-Host \"Skipping folder: $($_.FullName)\"",
            "#    } else {",
            "#        Write-Host \"Running script: $($_.FullName)\"",
            "#        try {",
            "#            & $_.FullName",
            "#        } catch {",
            "#            Write-Host \"Error running script: $($_.FullName)\"",
            "#            Write-Host \"Error message: $($_.Exception.Message)\"",
            "#        }",
            "#    }",
            "#}",
            "Write-Host \"All startup scripts completed.\"",
            "Write-Host \"Cleaning up startup folder...\"",
            "#Remove-Item -Path $StartupFolder -Recurse -Force",
            "Write-Host \"Startup folder cleaned up.\"",
            "Write-Host \"Finished running the script!\"",
            "Stop-Transcript"
        ]
    },
    "resources": [
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-05-01",
        "name": "[variables('networkInterfaceName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "subnet": {
                  "id": "[variables('subnetRef')]"
                },
                "privateIPAllocationMethod": "Dynamic"
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[variables('nsgId')]"
          }
        }
      },
      {
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2020-05-01",
        "name": "[variables('networkSecurityGroupName')]",
        "location": "[variables('location')]",
        "properties": {
          "securityRules": [
            {
              "name": "RDP",
              "properties": {
                "priority": 1010,
                "protocol": "TCP",
                "access": "Allow",
                "direction": "Inbound",
                "sourceAddressPrefix": "*",
                "sourcePortRange": "*",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "3389"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2019-07-01",
        "name": "[variables('uniqueVMName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('vmSize')[parameters('Size')]]"
          },
          "storageProfile": {
            "osDisk": {
              "createOption": "fromImage",
              "diskSizeGB": "[variables('osDiskSize')]",
              "managedDisk": {
                "storageAccountType": "[variables('osDiskType')]"
              }
            },
            "imageReference": {
              "publisher": "microsoft-dsvm",
              "offer": "dsvm-win-2022",
              "sku": "winserver-2022",
              "version": "latest"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
              }
            ]
          },
          "osProfile": {
            "computerName": "[variables('uniqueVMName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "windowsConfiguration": {
                        "enableAutomaticUpdates": true,
                        "provisionVmAgent": true
            },
            "customData": "[base64(join(variables('userDataScript'), '\n'))]"
          },
          "priority": "[variables('instancePriority')[parameters('instanceType')]]",
          "evictionPolicy": "[variables('instanceEvictionPolicy')[parameters('instanceType')]]",
          "billingProfile": {
            "maxPrice": "[variables('instanceMaxPrice')[parameters('instanceType')]]"
          }
        }
      }
    ],
    "outputs": {
       "loginUsername": {
        "type": "string",
        "value": "[parameters('adminUsername')]"
       },
        "privateIpAddress": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))).ipConfigurations[0].properties.privateIpAddress]"
      },
       "deployedVirtualMachineName": {
        "type": "string",
        "value": "[variables('uniqueVMName')]"
       }
    }
}